## Drapto Python Tool Overview

Drapto supports two distinct encoding paths:
1. **Dolby Vision Path**: For content with Dolby Vision metadata
2. **Chunked Encoding Path**: For all other content

The path selection is automatic based on Dolby Vision detection. The chunked encoding path is the default and preferred method, but Dolby Vision content must use the Dolby Vision path due to technical limitations with chunked encoding of Dolby Vision content.

Drapto is a rewrite in Python of the original encode bash scripts.

## Project specific rules

Replace ffmpeg and ffprobe calls with FFmpeg Python bindings when possible.
We are refactoring. Do not change or remove application functionality unless requested or without approval. All application functionality must be preserved.
Do not remove code that impacts application functionality without asking for approval first.
If you spot potential application improvements, suggest them and ask for approval.
Do not change existing default values without first asking for approval.
If you spot errors, faulty logic, broken logic, or unexpected behavior in the existing Python code, ask for approval first before fixing.
Stick to the structure and order of the Cascade Implementation Plan while refactoring. If changes to the plan are needed, suggest them and ask for approval first.
Application terminal output must be clear, concise, easy to understand, and easy for the user to track encoding progress. Terminal output must be formatted correctly for readability.
Application terminal output must track the progress of each task, including encoding, validation, and muxing.
Show what ab-av1 or ffmpeg commands are being run in the terminal output so users can understand what is happening. These commands should be formatted correctly.
Do not make application terminal output cluttered or overly verbose.
Organize application output so users see relevent messages when the appropriate LOG_LEVEL is set.
Application functionality should match the reference bash scripts and workflow documentation. Do not deviate without approval.

## Project locations

### Reference encode bash scripts:

/encode.sh
/encode_audio_functions.sh
/encode_subtitle_functions.sh
/encode_config.sh
/encode_formatting.sh
/encode_hardware_acceleration.sh
/encode_processing.sh
/encode_utilities.sh
/encode_validation.sh
/encode_video_functions.sh

These are reference scripts only. Do not edit these files.
Examine the encode bash scripts for guidance when making changes. Point out any code changes or requests that conflict with the bash scripts and ask for clarification and approval.

### Drapto Python code:

/python/drapto/

### Refactoring documentation:

/python/drapto/src/drapto/docs/refactoring/

### Refactoring plan:

/python/drapto/src/drapto/docs/refactoring/cascade_implementation_plan.md

### Workflow documentation:

/python/drapto/src/drapto/docs/workflow/

Look at the workflow documentation when making changes. Point out any code changes that conflict with the workflow and ask for clarification and approval.
If you receive approval, make the changes and update the workflow documentation.

## AI Assistant Guidelines

### Core Principles
1. **Atomic Changes**:
   - Make one logical change at a time
   - Keep changes small and focused
   - Ensure each change can be validated independently
   - Maintain working state between changes

2. **Tool Usage**:
   - Use `codebase_search` for understanding code context
   - Use `grep_search` for finding specific patterns
   - Use `view_file` to examine full implementations
   - Use `edit_file` for precise, minimal changes
   - Use `write_to_file` for new components

3. **Error Prevention**:
   - Validate inputs before processing
   - Add comprehensive error handling
   - Include type hints for all parameters
   - Add assertions for critical assumptions

4. **Code Quality**:
   - Follow PEP 8 style guide
   - Add detailed docstrings
   - Use type hints consistently
   - Keep functions focused and small
   - Use descriptive variable names

5. **Testing Strategy**:
   - Write tests before implementation
   - Include unit tests for components
   - Add integration tests for workflows
   - Test error cases explicitly
   - Verify resource cleanup

6. **Safety Measures**:
   - Use feature flags for new code
   - Log all significant operations
   - Add validation between steps
   - Implement rollback mechanisms
   - Monitor system resources

7. **Documentation**:
   - Update docs with each change
   - Add inline code comments
   - Document error cases
   - Include usage examples
   - Note any limitations

## Rules

Use proper Python coding style, code organization, and best practices.
When making code changes, always state exactly what you are changing and why.
Add meaningful comments to explain the purpose of the code.
Add top level comments to explain the purpose of the file.
Use type hints to document the expected types of inputs and outputs.
Use assertions to validate assumptions and check for errors.
Use try-except to handle exceptions and provide appropriate error messages.
Use logging to track operations and errors.
Use unit tests to validate components.

## Troubleshooting Rules

Use proper troubleshooting techniques to diagnose and resolve issues.
Avoid repeat guesses. Enable debug to view output and narrow down the problem.
Avoid circular troubleshooting. Track your attempts and progress to narrow down the problem.
Admit when you do not know an anwser. Ask for help.
State when an approach is not working and why. Suggest alternatives.