## Drapto Python Tool Overview

Drapto supports two distinct encoding paths:
1. **Dolby Vision Path**: For content with Dolby Vision metadata
2. **Chunked Encoding Path**: For all other content

Selection is automatic. Chunked is default/preferred; Dolby Vision must use the Dolby Vision path due to technical limitations.

Drapto is a rewrite in Python of original encode bash scripts.

## Project specific rules

Replace ffmpeg/ffprobe calls with FFmpeg Python bindings when possible.
Refactoring must preserve existing functionality unless otherwise approved.
When refactoring, search for and reuse existing project code whenever possible. Reuse is always preferred over rewriting.
When refactoring, clean up unused, obsolete, and redundant code. When code is migrated, ask for approval and remove the old and redundant code.
Remove unused or obsolete code only after approval.
If you spot potential application improvements, suggest them and ask for approval.
Do not change existing default values without first asking for approval.
For errors or unexpected behavior, ask for approval before fixing.
Follow the Cascade Implementation Plan structure. Ask for approval if changes are needed.
Terminal output must be clear, concise, track task progress (encoding, validation, muxing), and show ab-av1/ffmpeg commands with correct formatting.
Application terminal output must track the progress of each task, including encoding, validation, and muxing.
Show what ab-av1 or ffmpeg commands are being run in the terminal output so users can understand what is happening. These commands should be formatted correctly.
Donâ€™t clutter output; organize messages by LOG_LEVEL
Application functionality should match the reference bash scripts and workflow docs. Do not deviate without approval.

## Project locations

### Reference encode bash scripts:

/encode.sh
/encode_audio_functions.sh
/encode_subtitle_functions.sh
/encode_config.sh
/encode_formatting.sh
/encode_hardware_acceleration.sh
/encode_processing.sh
/encode_utilities.sh
/encode_validation.sh
/encode_video_functions.sh

These are reference scripts only. Do not edit.
Examine the encode bash scripts for guidance when making changes. Point out any conflicting code changes or requests and ask for clarification and approval.

### Drapto Python code:

/python/drapto/

### Refactoring documentation:

/python/drapto/src/drapto/docs/refactoring/

### Refactoring plan:

/python/drapto/src/drapto/docs/refactoring/cascade_implementation_plan.md

### Workflow documentation:

/python/drapto/src/drapto/docs/workflow/

Look at the workflow documentation when making changes. Point out any code changes that conflict with the workflow and ask for clarification and approval.
If you receive approval, make the changes and update the workflow documentation.

## AI Assistant Guidelines

### Core Principles
1. **Atomic Changes**:
   - Make one logical change at a time
   - Keep changes small and focused
   - Ensure each change can be validated independently
   - Maintain working state between changes

2. **Tool Usage**:
   - Use `codebase_search` for understanding code context
   - Use `grep_search` for finding specific patterns
   - Use `view_file` to examine full implementations
   - Use `edit_file` for precise, minimal changes
   - Use `write_to_file` for new components

3. **Error Prevention**:
   - Validate inputs before processing
   - Add comprehensive error handling
   - Include type hints for all parameters
   - Add assertions for critical assumptions

4. **Code Quality**:
   - Follow PEP 8 style guide
   - Add detailed docstrings
   - Use type hints consistently
   - Keep functions focused and small
   - Use descriptive variable names

5. **Testing Strategy**:
   - Write tests before implementation
   - Include unit tests for components
   - Add integration tests for workflows
   - Test error cases explicitly
   - Verify resource cleanup

6. **Safety Measures**:
   - Use feature flags for new code
   - Log all significant operations
   - Add validation between steps
   - Implement rollback mechanisms
   - Monitor system resources

7. **Documentation**:
   - Update docs with each change
   - Add inline code comments
   - Document error cases
   - Include usage examples
   - Note any limitations

## Rules

Use proper Python style, organization, best practices.
Always analyze exising code and docs to understand how it works before adding new code.
Always specify what code changes are made and why.
Add meaningful comments to explain the purpose of the code.
Add top level comments to explain the purpose of the file.
Use type hints to document the expected types of inputs and outputs.
Use assertions to validate assumptions and check for errors.
Use try-except to handle exceptions and provide appropriate error messages.
Use logging to track operations and errors.
Use unit tests to validate components.

## Troubleshooting Rules

Use proper troubleshooting techniques to diagnose and resolve issues.
Avoid repeat guesses. Enable debug to narrow down the problem.
Avoid circular troubleshooting. Track your attempts and progress to narrow down the problem.
Admit if you do not know. Ask for help.
State when an approach is not working and why. Suggest alternatives.